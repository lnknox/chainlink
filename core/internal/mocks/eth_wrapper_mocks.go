// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/smartcontractkit/chainlink/core/store (interfaces: EthWrapper)

// Package mocks is a generated GoMock package.
package mocks

import (
	big "math/big"
	reflect "reflect"

	go_ethereum "github.com/ethereum/go-ethereum"
	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
	assets "github.com/smartcontractkit/chainlink/core/store/assets"
	models "github.com/smartcontractkit/chainlink/core/store/models"
)

// MockEthWrapper is a mock of EthWrapper interface
type MockEthWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockEthWrapperMockRecorder
}

// MockEthWrapperMockRecorder is the mock recorder for MockEthWrapper
type MockEthWrapperMockRecorder struct {
	mock *MockEthWrapper
}

// NewMockEthWrapper creates a new mock instance
func NewMockEthWrapper(ctrl *gomock.Controller) *MockEthWrapper {
	mock := &MockEthWrapper{ctrl: ctrl}
	mock.recorder = &MockEthWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEthWrapper) EXPECT() *MockEthWrapperMockRecorder {
	return m.recorder
}

// GetBlockByNumber mocks base method
func (m *MockEthWrapper) GetBlockByNumber(arg0 string) (models.BlockHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByNumber", arg0)
	ret0, _ := ret[0].(models.BlockHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByNumber indicates an expected call of GetBlockByNumber
func (mr *MockEthWrapperMockRecorder) GetBlockByNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByNumber", reflect.TypeOf((*MockEthWrapper)(nil).GetBlockByNumber), arg0)
}

// GetChainID mocks base method
func (m *MockEthWrapper) GetChainID() (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainID")
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainID indicates an expected call of GetChainID
func (mr *MockEthWrapperMockRecorder) GetChainID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainID", reflect.TypeOf((*MockEthWrapper)(nil).GetChainID))
}

// GetERC20Balance mocks base method
func (m *MockEthWrapper) GetERC20Balance(arg0, arg1 common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetERC20Balance", arg0, arg1)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetERC20Balance indicates an expected call of GetERC20Balance
func (mr *MockEthWrapperMockRecorder) GetERC20Balance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetERC20Balance", reflect.TypeOf((*MockEthWrapper)(nil).GetERC20Balance), arg0, arg1)
}

// GetEthBalance mocks base method
func (m *MockEthWrapper) GetEthBalance(arg0 common.Address) (*assets.Eth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEthBalance", arg0)
	ret0, _ := ret[0].(*assets.Eth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEthBalance indicates an expected call of GetEthBalance
func (mr *MockEthWrapperMockRecorder) GetEthBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEthBalance", reflect.TypeOf((*MockEthWrapper)(nil).GetEthBalance), arg0)
}

// GetLogs mocks base method
func (m *MockEthWrapper) GetLogs(arg0 go_ethereum.FilterQuery) ([]models.Log, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", arg0)
	ret0, _ := ret[0].([]models.Log)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogs indicates an expected call of GetLogs
func (mr *MockEthWrapperMockRecorder) GetLogs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockEthWrapper)(nil).GetLogs), arg0)
}

// GetNonce mocks base method
func (m *MockEthWrapper) GetNonce(arg0 common.Address) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNonce indicates an expected call of GetNonce
func (mr *MockEthWrapperMockRecorder) GetNonce(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockEthWrapper)(nil).GetNonce), arg0)
}

// GetTxReceipt mocks base method
func (m *MockEthWrapper) GetTxReceipt(arg0 common.Hash) (*models.TxReceipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxReceipt", arg0)
	ret0, _ := ret[0].(*models.TxReceipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxReceipt indicates an expected call of GetTxReceipt
func (mr *MockEthWrapperMockRecorder) GetTxReceipt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxReceipt", reflect.TypeOf((*MockEthWrapper)(nil).GetTxReceipt), arg0)
}

// GetWeiBalance mocks base method
func (m *MockEthWrapper) GetWeiBalance(arg0 common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeiBalance", arg0)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeiBalance indicates an expected call of GetWeiBalance
func (mr *MockEthWrapperMockRecorder) GetWeiBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeiBalance", reflect.TypeOf((*MockEthWrapper)(nil).GetWeiBalance), arg0)
}

// SendRawTx mocks base method
func (m *MockEthWrapper) SendRawTx(arg0 string) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRawTx", arg0)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRawTx indicates an expected call of SendRawTx
func (mr *MockEthWrapperMockRecorder) SendRawTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRawTx", reflect.TypeOf((*MockEthWrapper)(nil).SendRawTx), arg0)
}

// SubscribeToLogs mocks base method
func (m *MockEthWrapper) SubscribeToLogs(arg0 chan<- models.Log, arg1 go_ethereum.FilterQuery) (models.EthSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToLogs", arg0, arg1)
	ret0, _ := ret[0].(models.EthSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToLogs indicates an expected call of SubscribeToLogs
func (mr *MockEthWrapperMockRecorder) SubscribeToLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToLogs", reflect.TypeOf((*MockEthWrapper)(nil).SubscribeToLogs), arg0, arg1)
}

// SubscribeToNewHeads mocks base method
func (m *MockEthWrapper) SubscribeToNewHeads(arg0 chan<- models.BlockHeader) (models.EthSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToNewHeads", arg0)
	ret0, _ := ret[0].(models.EthSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToNewHeads indicates an expected call of SubscribeToNewHeads
func (mr *MockEthWrapperMockRecorder) SubscribeToNewHeads(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToNewHeads", reflect.TypeOf((*MockEthWrapper)(nil).SubscribeToNewHeads), arg0)
}
